# .github/workflows/naukri-cookie-automation.yml
name: Naukri Cookie-Based Resume Upload

on:
  schedule:
    # 9:30 AM IST = 4:00 AM UTC
    - cron: '30 4 * * *'
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if cookies might be expired'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Run in test mode (no actual upload)'
        required: false
        default: 'false'
        type: boolean

jobs:
  upload-resume:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 🛎️ Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install selenium undetected-chromedriver requests python-dotenv
        
    - name: 🌐 Setup Chrome and ChromeDriver (Version Matched)
      run: |
        # Update system
        sudo apt-get update
        
        # Install dependencies
        sudo apt-get install -y wget curl unzip xvfb jq
        
        # Remove any existing Chrome and ChromeDriver
        sudo apt-get purge -y google-chrome-stable || true
        sudo rm -f /usr/local/bin/chromedriver
        
        # Install Google Chrome Stable
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get exact Chrome version
        CHROME_FULL_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
        CHROME_VERSION=$(echo $CHROME_FULL_VERSION | grep -oP '\d+\.\d+\.\d+')
        CHROME_MAJOR=$(echo $CHROME_VERSION | cut -d. -f1)
        echo "Chrome full version: $CHROME_FULL_VERSION"
        echo "Chrome version: $CHROME_VERSION" 
        echo "Chrome major: $CHROME_MAJOR"
        
        # Function to try ChromeDriver download
        download_chromedriver() {
          local url=$1
          local name=$2
          echo "Trying $name: $url"
          if wget -q --timeout=30 "$url" -O chromedriver.zip; then
            if unzip -q chromedriver.zip; then
              # Handle different archive structures
              if [ -f "chromedriver-linux64/chromedriver" ]; then
                sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
                return 0
              elif [ -f "chromedriver" ]; then
                sudo mv chromedriver /usr/local/bin/
                return 0
              fi
            fi
          fi
          return 1
        }
        
        # Strategy 1: Try exact version match from Chrome for Testing
        CHROMEDRIVER_INSTALLED=false
        if [ "$CHROME_MAJOR" -ge "115" ]; then
          echo "=== Trying Chrome for Testing API ==="
          
          # Try exact version first
          if download_chromedriver "https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/linux64/chromedriver-linux64.zip" "Exact version ${CHROME_VERSION}"; then
            CHROMEDRIVER_INSTALLED=true
          # Try major version latest
          elif LATEST_FOR_MAJOR=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_MAJOR}" 2>/dev/null); then
            if download_chromedriver "https://storage.googleapis.com/chrome-for-testing-public/${LATEST_FOR_MAJOR}/linux64/chromedriver-linux64.zip" "Latest for major ${CHROME_MAJOR}: ${LATEST_FOR_MAJOR}"; then
              CHROMEDRIVER_INSTALLED=true
            fi
          fi
        fi
        
        # Strategy 2: Try legacy API with version matching
        if [ "$CHROMEDRIVER_INSTALLED" = false ]; then
          echo "=== Trying legacy ChromeDriver API ==="
          
          # Try exact version match
          if download_chromedriver "https://chromedriver.storage.googleapis.com/${CHROME_VERSION}/chromedriver_linux64.zip" "Legacy exact ${CHROME_VERSION}"; then
            CHROMEDRIVER_INSTALLED=true
          # Try some compatible versions around the detected version
          else
            # Extract version parts
            MAJOR=$(echo $CHROME_VERSION | cut -d. -f1)
            MINOR=$(echo $CHROME_VERSION | cut -d. -f2)
            PATCH=$(echo $CHROME_VERSION | cut -d. -f3)
            
            # Try variations (sometimes minor version differences work)
            for PATCH_VAR in $PATCH $((PATCH-1)) $((PATCH+1)) $((PATCH-2)) $((PATCH+2)); do
              if [ $PATCH_VAR -ge 0 ]; then
                TEST_VERSION="${MAJOR}.${MINOR}.${PATCH_VAR}.0"
                if download_chromedriver "https://chromedriver.storage.googleapis.com/${TEST_VERSION}/chromedriver_linux64.zip" "Legacy variation ${TEST_VERSION}"; then
                  CHROMEDRIVER_INSTALLED=true
                  break
                fi
              fi
            done
          fi
        fi
        
        # Strategy 3: Try known working versions as fallback
        if [ "$CHROMEDRIVER_INSTALLED" = false ]; then
          echo "=== Trying known stable versions ==="
          # Recent stable versions that usually work
          for VERSION in "120.0.6099.71" "119.0.6045.105" "118.0.5993.70" "117.0.5938.92" "116.0.5845.96" "115.0.5790.102" "114.0.5735.90"; do
            if download_chromedriver "https://chromedriver.storage.googleapis.com/${VERSION}/chromedriver_linux64.zip" "Known stable ${VERSION}"; then
              CHROMEDRIVER_INSTALLED=true
              break
            fi
          done
        fi
        
        # Strategy 4: Use setup-chromedriver action as last resort
        if [ "$CHROMEDRIVER_INSTALLED" = false ]; then
          echo "=== All manual methods failed, trying alternative approach ==="
          # Try to install a compatible Chrome version instead
          
          # Remove current Chrome
          sudo apt-get remove -y google-chrome-stable
          
          # Install an older stable Chrome version (114 is well supported)
          wget -q "https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_114.0.5735.198-1_amd64.deb"
          sudo dpkg -i google-chrome-stable_114.0.5735.198-1_amd64.deb || sudo apt-get install -f -y
          
          # Install matching ChromeDriver
          if download_chromedriver "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip" "Stable Chrome 114"; then
            CHROMEDRIVER_INSTALLED=true
          fi
        fi
        
        # Final check
        if [ "$CHROMEDRIVER_INSTALLED" = false ]; then
          echo "❌ Failed to install compatible ChromeDriver"
          exit 1
        fi
        
        # Set permissions and verify
        sudo chmod +x /usr/local/bin/chromedriver
        
        # Verify versions
        echo "=== Final Verification ==="
        FINAL_CHROME_VERSION=$(google-chrome --version)
        FINAL_CHROMEDRIVER_VERSION=$(chromedriver --version)
        echo "Chrome: $FINAL_CHROME_VERSION"
        echo "ChromeDriver: $FINAL_CHROMEDRIVER_VERSION"
        
        # Test basic functionality
        echo "=== Testing Chrome headless ==="
        timeout 15s google-chrome --headless --disable-gpu --no-sandbox --virtual-time-budget=1000 --dump-dom https://httpbin.org/html | grep -q "Herman Melville" && echo "✅ Chrome test passed" || echo "⚠️ Chrome test failed but continuing"
        
    - name: 🔧 Set up display server
      run: |
        # Start virtual display for GUI applications (backup)
        export DISPLAY=:99
        Xvfb :99 -screen 0 1366x768x24 > /dev/null 2>&1 &
        sleep 2
        
    - name: 📁 Create required directories
      run: |
        mkdir -p cookies
        mkdir -p logs
        mkdir -p /tmp/chrome-profile
        
    - name: 🍪 Prepare cookies
      run: |
        if [ ! -z "${{ secrets.NAUKRI_COOKIES_B64 }}" ]; then
          echo "Cookies secret found, decoding..."
          echo "${{ secrets.NAUKRI_COOKIES_B64 }}" | base64 -d > cookies/naukri_cookies.json
          echo "Cookies decoded successfully"
          echo "Cookie file size: $(wc -c < cookies/naukri_cookies.json) bytes"
        else
          echo "❌ No cookies found in secrets!"
          exit 1
        fi
        
    - name: 📄 Verify resume file
      run: |
        if [ -f "resume/Nikhil_Saini_Resume.pdf" ]; then
          echo "✅ Resume file found: $(ls -lh resume/Nikhil_Saini_Resume.pdf)"
        else
          echo "❌ Resume file not found!"
          echo "Available files:"
          find . -name "*.pdf" -type f
          exit 1
        fi
        
    - name: 🚀 Run Naukri automation
      env:
        NAUKRI_COOKIES_B64: ${{ secrets.NAUKRI_COOKIES_B64 }}
        RESUME_PATH: './resume/Nikhil_Saini_Resume.pdf'
        MODE: 'automation'
        TEST_MODE: ${{ github.event.inputs.test_mode }}
        DISPLAY: ':99'
        # Chrome specific environment variables
        CHROME_BIN: '/usr/bin/google-chrome'
        CHROMEDRIVER_PATH: '/usr/local/bin/chromedriver'
      run: |
        echo "Starting automation at $(date)"
        echo "Environment check:"
        echo "- Chrome: $(which google-chrome || echo 'not found')"
        echo "- ChromeDriver: $(which chromedriver || echo 'not found')"
        echo "- Display: $DISPLAY"
        echo "- Python: $(python --version)"
        
        # Kill any existing Chrome processes
        pkill -f chrome || true
        sleep 2
        
        # Run the automation with timeout
        timeout 900s python automation/naukri_cookie_uploader.py || {
          echo "Automation timed out or failed"
          exit 1
        }
        
    - name: 🧹 Cleanup processes
      if: always()
      run: |
        # Kill Chrome processes
        pkill -f chrome || true
        pkill -f chromedriver || true
        pkill -f Xvfb || true
        sleep 2
        
    - name: 📊 Upload logs and screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: automation-artifacts-${{ github.run_number }}
        path: |
          logs/
          *.log
          *.png
        retention-days: 7
        if-no-files-found: ignore
        
    - name: ✅ Success notification
      if: success()
      run: |
        echo "🎉 Resume upload completed successfully!"
        echo "Timestamp: $(date)"
        echo "Next scheduled run: Tomorrow at 9:30 AM IST"
        
    - name: ❌ Failure notification
      if: failure()
      run: |
        echo "🚨 Automation failed!"
        echo "Possible causes:"
        echo "- Cookies expired (login manually and update NAUKRI_COOKIES_B64 secret)"
        echo "- Naukri website changes"
        echo "- Chrome/ChromeDriver compatibility issues"
        echo "- Network issues"
        echo ""
        echo "Debugging info:"
        echo "- Chrome processes: $(pgrep -f chrome | wc -l)"
        echo "- Available disk space: $(df -h /tmp)"
        echo "- Memory usage: $(free -h)"
        
    - name: 🔍 Debug information (on failure)
      if: failure()
      run: |
        echo "=== System Information ==="
        uname -a
        echo "=== Chrome Version ==="
        google-chrome --version || echo "Chrome not available"
        echo "=== ChromeDriver Version ==="
        chromedriver --version || echo "ChromeDriver not available"
        echo "=== Python Packages ==="
        pip list | grep -E "(selenium|undetected)"
        echo "=== Log Files ==="
        find logs/ -name "*.html" -exec ls -la {} \; 2>/dev/null || echo "No HTML logs"
        find logs/ -name "*.png" -exec ls -la {} \; 2>/dev/null || echo "No screenshots"
        echo "=== Process List ==="
        ps aux | grep -E "(chrome|python)" || echo "No relevant processes"

# Separate workflow for cookie extraction reminder
---
name: Cookie Refresh Reminder

on:
  schedule:
    # Remind to refresh cookies every 25 days
    - cron: '0 9 */25 * *'
  workflow_dispatch:

jobs:
  remind-cookie-refresh:
    runs-on: ubuntu-latest
    steps:
    - name: 🔔 Cookie refresh reminder
      run: |
        echo "🍪 Time to refresh your Naukri cookies!"
        echo "1. Run the cookie extraction script locally"
        echo "2. Update the NAUKRI_COOKIES_B64 GitHub secret"
        echo "3. Test the automation with manual trigger"
        echo ""
        echo "Cookie refresh is recommended every 25-30 days to maintain login sessions."
